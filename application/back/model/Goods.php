<?php

namespace app\back\model;
use think\Db;
use think\Model;
use think\Collection;

class Goods extends Base
{
    protected $autoWriteTimestamp = true;
    protected  $updateTime = false;
    protected  static  function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        Goods::beforeInsert(function ($goods){
            //处理上传
            if(request()->file('goodsImg')) {
                $path = ROOT_PATH . 'public' . DS . 'uploads';
                $ext = ['size' => 202555, 'ext' => 'jpg,png,gif'];
                $file_rule = 'uniqid';
                $goods->uploads($goods, 'goodsImg', $ext, $file_rule, $path);
            }
        });
        Goods::beforeUpdate(function ($goods){

            if(request()->file('goodsImg')){
                //处理上传
                $path = ROOT_PATH.'public'.DS.'uploads';
                $ext = ['size'=>252222,'ext'=>'jpg,png,gif'];
                $file_rule = 'uniqid';
                $goods->uploads($goods,'goodsImg',$ext,$file_rule,$path);
                //并删除原来的图片
                $id = $goods->id;
                $img = $goods::where('id', $id)->value('goodsImg');
                //$root_path = dirname(dirname(dirname(dirname(__File__))));
                $img_dir = ROOT_PATH . 'public/uploads/' . "$img";
                @unlink($img_dir);
            }

        });

        Goods::beforeDelete(function ($goods){
            $id = $goods->id;
            $img = $goods::where('id', $id)->value('goodsImg');
            //$root_path = dirname(dirname(dirname(dirname(__File__))));
            $img_dir = ROOT_PATH . 'public/uploads/' . "$img";
            @unlink($img_dir);
        });
    }


    /*
     * 文件上传
     * @param $goods 模型对象
     * @param $filename 文件名称
     * @param $ext 文件后缀和大小
     * @param $file_rule 生成的文件路径规则
     * @param $path  文件上传后的路径
     * @return array()
     */

   public function uploads($goods,$filname,$ext,$file_rule,$path)
   {

       $img = request()->file($filname);

       if(empty($img)) return false;


       $info = $img->validate($ext)->rule($file_rule)->move($path);
       if($info)
       {
           $file_name = $info->getSaveName();
           $goods[$filname] = $file_name;

          return bkReturn('上传成功',1) ;
       }
       else
       {
           return $img->getError();
       }


   }
   // 获取商品列表
    public function getList()
    {
        //搜索
        $where=[];
        //$pageParam = ['query'=>[]];
        if(request()->isGet())
        {
           if($name = input('param.goodsName'))
           {
               $where['goodsName'] = ['like','%'.$name.'%'];
               //$pageParam['query']['goodsName'] = $name;
           }
//           $stime = input('param.promote_start_time');
//           $etime = input('param.promote_end_time');
//           $stime = strtotime($stime);
//           $etime = strtotime($etime);
//            if($stime && $etime)
//            {
//                $where['create_time'] = ['between time',[$stime,$etime]];
//
//            }elseif ($stime)
//            {
//                $where['create_time'] = ['> time',$stime];
//            }else
//            {
//                $where['create_time'] = ['< time' ,$etime];
//            }

            if($price = input('param.goodsPrice'))
            {
                $where['goodsPrice'] = $price;
                //$pageParam['query']['goodsPrice'] = $price;
            }
        }

        //分页
            //dump($where);
        return $list = $this::where($where)->order('id')->paginate(5);

    }




}
